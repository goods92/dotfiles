import * as si from 'systeminformation';
import { ServiceUnavailableException } from '@nestjs/common';
import { Logger } from '../../core/logger/logger.service';
import { ConfigService } from '../../core/config/config.service';
import { ConfigEditorService } from '../config-editor/config-editor.service';
import { AccessoriesService } from '../accessories/accessories.service';
export declare class ServerService {
    private readonly configService;
    private readonly configEditorService;
    private readonly accessoriesService;
    private readonly logger;
    private serverServiceCache;
    private accessoryId;
    private accessoryInfoPath;
    private setupCode;
    constructor(configService: ConfigService, configEditorService: ConfigEditorService, accessoriesService: AccessoriesService, logger: Logger);
    restartServer(): Promise<{
        ok: boolean;
        command: string;
        restartingUI: boolean;
    }>;
    resetHomebridgeAccessory(): Promise<void>;
    getDevicePairings(): Promise<any[]>;
    deleteDevicePairing(id: string): Promise<void>;
    getCachedAccessories(): Promise<any>;
    deleteCachedAccessory(uuid: string): Promise<unknown>;
    resetCachedAccessories(): Promise<void>;
    generateQrCode(): Promise<any>;
    private getSetupCode;
    private generateSetupCode;
    getBridgePairingInformation(): Promise<ServiceUnavailableException | {
        displayName: any;
        pincode: any;
        setupCode: string;
        isPaired: boolean;
    }>;
    getSystemNetworkInterfaces(): Promise<si.Systeminformation.NetworkInterfacesData[]>;
    getHomebridgeNetworkInterfaces(): Promise<string[]>;
    setHomebridgeNetworkInterfaces(adapters: string[]): Promise<void>;
    private nodeVersionChanged;
}
